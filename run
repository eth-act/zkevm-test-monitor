#!/bin/bash
# run - Main entry point for ZKVM testing

set -e

CMD=${1:-help}
shift || true

case "$CMD" in
    build)
        echo "üî® Building ZKVMs: ${@:-all}"
        ./src/build.sh "$@"
        ;;

    test)
        # Validate that a suite flag is provided
        if ! echo "$@" | grep -E '(--(arch|extra))' > /dev/null; then
            echo "‚ùå Error: Must specify either --arch or --extra"
            echo "Usage: ./run test [--arch|--extra] [--build-only] [target1 target2 ...]"
            exit 1
        fi
        # Extract suite type and targets for display
        SUITE_TYPE=""
        DISPLAY_TARGETS=""
        BUILD_ONLY_FLAG=""
        for arg in "$@"; do
            if [[ "$arg" == "--arch" ]]; then
                SUITE_TYPE="arch"
            elif [[ "$arg" == "--extra" ]]; then
                SUITE_TYPE="extra"
            elif [[ "$arg" == "--build-only" ]]; then
                BUILD_ONLY_FLAG=" (build-only)"
            else
                DISPLAY_TARGETS="$DISPLAY_TARGETS $arg"
            fi
        done
        DISPLAY_TARGETS="${DISPLAY_TARGETS:-all}"
        echo "üß™ Testing ZKVMs (${SUITE_TYPE})${BUILD_ONLY_FLAG}: ${DISPLAY_TARGETS# }"
        ./src/test.sh "$@"
        python3 src/update.py
        ;;

    update)
        echo "üìä Updating dashboard"
        python3 src/update.py
        ;;

    all)
        # Validate that a suite flag is provided
        if ! echo "$@" | grep -E '(--(arch|extra))' > /dev/null; then
            echo "‚ùå Error: Must specify either --arch or --extra"
            echo "Usage: ./run all [--arch|--extra] [target1 target2 ...]"
            exit 1
        fi
        # Extract suite type and targets for display
        SUITE_TYPE=""
        DISPLAY_TARGETS=""
        for arg in "$@"; do
            if [[ "$arg" == "--arch" ]]; then
                SUITE_TYPE="arch"
            elif [[ "$arg" == "--extra" ]]; then
                SUITE_TYPE="extra"
            else
                DISPLAY_TARGETS="$DISPLAY_TARGETS $arg"
            fi
        done
        DISPLAY_TARGETS="${DISPLAY_TARGETS:-all}"
        echo "üöÄ Building and testing (${SUITE_TYPE}): ${DISPLAY_TARGETS# }"
        # Extract non-flag arguments for build.sh
        BUILD_TARGETS=""
        for arg in "$@"; do
            if [[ "$arg" != "--arch" && "$arg" != "--extra" ]]; then
                BUILD_TARGETS="$BUILD_TARGETS $arg"
            fi
        done
        ./src/build.sh ${BUILD_TARGETS# }
        ./src/test.sh "$@"
        python3 src/update.py
        ;;

    serve)
        echo "üåê Server at http://localhost:8000"
        echo "   Press Ctrl+C to stop"
        cd docs && python3 -m http.server 8000 --bind 127.0.0.1
        ;;

    debug)
        echo "üêõ Debug mode"
        ./src/debug.sh "$@"
        ;;

    clean)
        echo "üßπ Cleaning artifacts"
        rm -rf binaries/ test-results/*/
        ;;

    *)
        cat << EOF
Usage: ./run COMMAND [OPTIONS]

Commands:
  build [zkvm]                         - Build ZKVM binaries
  test [--arch|--extra] [--build-only] [zkvm]
                                       - Run RISCOF tests (suite required)
  debug [--arch|--extra] <zkvm> <test-pattern>
                                       - Re-run specific test with verbose logging
  update                               - Regenerate dashboard HTML
  all [--arch|--extra] [zkvm]          - Build + test + update (suite required)
  serve                                - Start local web server
  clean                                - Remove build artifacts

Test Suite Options:
  --arch                               - Run architecture compliance tests
  --extra                              - Run extended differential tests
  --build-only                         - Compile tests without running them

Environment Variables:
  JOBS=N                               - Limit to N CPU cores (pins container to cores 0 to N-1)
                                         Example: JOBS=8 ./run test --arch zisk (uses cores 0-7)

Examples:
  ./run build sp1                      # Build just SP1
  ./run test --arch sp1 jolt           # Test SP1 and Jolt with arch suite
  ./run test --arch --build-only       # Compile arch tests for all ZKVMs
  ./run test --extra                   # Test all ZKVMs with extra suite
  JOBS=8 ./run test --arch zisk        # Test zisk using only 8 cores
  ./run all --arch                     # Build and test everything with arch suite
  ./run debug --arch openvm div-01     # Debug specific test with full logging
  ./run serve                          # View dashboard locally

Additional Scripts:
  ./src/test_debug.sh [zkvm]           - Validate debug command (run after tests)
EOF
        ;;
esac
